<pre class='metadata'>
Title: List of notifications
Shortname: notifications
Level: 1
Status: LS
URL: https://mellonscholarlycommunication.github.io/spec-notifications
Editor: Miel Vander Sande, meemoo - [Flemish Institute for Archiving](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Patrick Hochstenbach, Ghent University, patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, Ghent University, ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, Ghent University, Jeroen.Werbrouck@ugent.be
Abstract: This document lists the possible notifications that can be used in the network. 
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table tbody > tr > th {
  background: #fff;
  color: #005A9C;
}
table th.last {
  border-right: none;
}
</style>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** project:

1. [Overview](/spec-overview/)
2. [Orchestrator](/spec-orchestrator/) 
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/)
5. [Artefact Lifecycle Event Log](/spec-eventlog/)
6. [Notifications](/spec-notifications/)

Introduction {#intro}
=====================

In a decentralized artefact exchange network, actors communicate using Linked Data Notifications [[ldn]].
An actor notifies interested other actors about events that have affected a particular artefact,
allowing the recepient to react (eg. by downloading the artefact) or respond.
The notification payloads are expressed in [[activitystreams-vocabulary]] with additional domain-specific volcabularies such as Schema.org.

This document defines the different notification types that can be used and how to construct their payloads.


Activities {#activities}
===========

In the network, [[spec-overview#actor|actors]] can perform activities that are linked to a certain artefact. 
Actors are either [[spec-overview#service-hub|Service Hubs]] or [[spec-overview#maintainer|Maintainers]] (see [[#mappings]]).
By notifying eachother about these activities, actors can communicate and accomplish collaborative actions in a distributed setting. 
Activities that somehow impact an artefact's lifecycle result in [[spec-overview#event|lifecycle events]].

The table below summarizes the possible notification types that actors can exchange.

<table>
  <thead>
    <tr>
    <th>Activity
    <th>ActivityStreams 2.0 Type
    <th>Purpose
  <tbody>
      <tr>
      <th colspan="3">Disseminating lifecycle aspects</th>
    </tr>
    <tr>
      <td>Create
      <td>[[activitystreams-vocabulary#Create|as:Create]]
      <td>An [[spec-overview#actor|actor]] creates an [[spec-overview#artefact|artefact]] in its data pod.
    <tr>
      <td>Update
      <td>[[activitystreams-vocabulary#update|as:Update]]
      <td>An [[spec-overview#actor|actor]] updates an [[spec-overview#artefact|artefact]] in its data pod.
    <tr>
      <td>Remove
      <td>[[activitystreams-vocabulary#Remove|as:Remove]]
      <td>An [[spec-overview#actor|actor]] removes an [[spec-overview#artefact|artefact]] from it's data pod.
  <tbody>
    <tr>
      <td>Announce
      <td>[[activitystreams-vocabulary#Announce|as:Announce]]
      <td>An [[spec-overview#actor|actor]] announces the existence of an [[spec-overview#artefact|artefact]].

  <tbody>
    <tr>
      <th colspan="3">Requesting services</th>
    </tr>
    <tr>
      <td>Offer
      <td>[[activitystreams-vocabulary#Offer|as:Offer]]
      <td>An [[spec-overview#actor|actor]] offers an [[spec-overview#artefact|artefact]] to another actor in order to conduct an [[spec-overview#activity|activity]] with that artefact as object.
    <tr>
      <td>Accept
      <td>[[activitystreams-vocabulary#Accept|as:Accept]]
      <td>A [[spec-overview#actor|actor]] accepts an [[spec-overview#artefact|artefact]] offer from another [[spec-overview#actor|actor]].
    <tr>
      <td>Reject
      <td>[[activitystreams-vocabulary#Reject|as:Reject]]
      <td>A [[spec-overview#actor|actor]] rejects an [[spec-overview#artefact|artefact]] offer from another [[spec-overview#actor|actor]].
    <tr>
      <td>Undo
      <td>[[activitystreams-vocabulary#Undo|as:Undo]]
      <td>An [[spec-overview#actor|actor]] retracts a prior [[spec-overview#activity|activity]].
</table>

Mappings {#mappings}
===========

All payloads in  a decentralized artefact exchange network define a [[activitystreams-vocabulary#activity]].
They MUST be typed as `as:Activity`.
The properties `as:actor`, `as:object`, and `as:target`, as defined in [[activitystreams-core#activities]], are used consistently across all notifications.

- `as:actor` refers to the [[spec-overview#actor|actor]] that performs or is expected to perform the `activity`. 
- `as:object` refers to the [[spec-overview#artefact|artefact]] on which the `activity` is performed. 
- `as:origin` refers to the sender of the activity; this can refer to the [[spec-overview#actor|actor]], the [[spec-overview#dashboard|dashboard]] or the [[spec-overview#orchestrator|orchestrator]]. 
- `as:target` refers to the destination of the activity; the other [[spec-overview#actor|actor]] that is being notified of this activity.

The terms in [[spec-overview#definitions]] should be mapped in a specific way, using specific types from [[activitystreams-vocabulary#actor-types]] and [[schema-org]].
this is outlined in more detail below.

## Actors

The actor of an activity MUST describe the [[activitystreams-vocabulary#actors]] that created the activity. 
It MUST use the following type mapping:

<table>
  <tr>
  <th>Actor
  <th>Type
  <tr>
  <td>[[spec-overview#Service-Hub|Service Hub]]
  <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>
  <td>[[spec-overview#Maintainer|Maintainer]]
  <td>[[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]]
</table>

The actor MUST be identifyable with an HTTP URI, which SHOULD be a [[webid]]
It MAY have an `ldp:inbox` that refers to the inbox URI where the actor can receive replies.
The actor MAY have a name using `schema:name`.

<div class=example>
Example of an organization as actor:

``` json
{
    "@context": {
      "@vocab": "https://schema.org/",
      "as": "https://www.w3.org/ns/activitystreams/",
      "inbox": {"@id": "http://www.w3.org/ns/ldp#inbox", "@type": "@id"}
    },
    "@id": "https://www.kb.nl#me",
    "@type": ["as:Organization", "Organization"],
  	"inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
}
```
</div>

## Artefacts

The object of an activity MUST describe the artefact on which the activity has effect.
It MUST be of type [[activitystreams-vocabulary#Object|as:Object]].

<div class=example>
Example of a Dataset as artefact:

``` json
{
    "@context": {
      "@vocab": "https://schema.org/",
      "as": "https://www.w3.org/ns/activitystreams/",
      "inbox": {"@id": "http://www.w3.org/ns/ldp#inbox", "@type": "@id"}
    },
    "@id": "https://www.kb.nl/datasets/1",
    "@type": ["as:Object", "Dataset"],
    "name": "Dataset about WOII"    
}
```
</div>

Payloads {#payloads}
===========

## [as:Create](https://www.w3.org/ns/activitystreams#Create)

A new dataset was created by the institution.

<table>
<thead>
    <tr>
    <th>Property
    <th>Type
<tbody>
<tr>
<td>actor  | [as:Organization](https://www.w3.org/ns/activitystreams#Organization) |
<td>object | [schema:Dataset](http://schema.org/Dataset) |
<td>origin | [schema:SoftwareApplication](https://schema.org/SoftwareApplication) |
</table>

Example:

``` json

{
  "@context": "https://www.w3.org/ns/activitystreams",
  "summary": "Koninklijke Bibliotheek announces Alba",
  "type": "Create",
  "actor": {
    "@context": "https://schema.org/",
    "@type": "Organization",
    "name": "Koninklijke Bibliotheek",
    "@id": "https://www.kb.nl/"
  },
  "object": {
    "@context": "https://schema.org/",
    "@type": "Dataset",
    "@id": "https://data.bibliotheken.nl/doc/dataset/rise-alba",
  },
  "origin": {
    "@context": "https://schema.org/",
    "@id": "http://example.org/Adlib",
    "@type": "SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}

```


## [as:Announce](https://www.w3.org/ns/activitystreams#Announce)

An institution announces the existence of a dataset. 

| property  | type              |
| :------------- | :----------- |
| target | [as:Service](https://www.w3.org/ns/activitystreams#Service) \| [as:Organization](https://www.w3.org/ns/activitystreams#Organization) |

## [as:Update](https://www.w3.org/ns/activitystreams#Update)




## [as:Delete](https://www.w3.org/ns/activitystreams#Delete)




## Create

``` json

{
  "@context": "https://www.w3.org/ns/activitystreams",
  "summary": "Koninklijke Bibliotheek announces Alba",
  "type": "Create",
  "actor": {
    "@context": "https://schema.org/",
    "@type": "Organization",
    "name": "Koninklijke Bibliotheek",
    "@id": "https://www.kb.nl/"
  },
  "object": {
    "@context": "https://schema.org/",
    "@type": "Dataset",
    "@id": "https://data.bibliotheken.nl/doc/dataset/rise-alba",
  },
  "origin": {
    "@context": "https://schema.org/",
    "@id": "http://example.org/Adlib",
    "@type": "SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}

```

## Update 




<!--

# Payloads used in notifications

## Dashboard 

### Activity types





### Object types



## Service Hub ([as:Service](https://www.w3.org/ns/activitystreams#Service))

## Activity types

- [as:Accept](https://www.w3.org/ns/activitystreams#Accept)
- [as:Add](https://www.w3.org/ns/activitystreams#Add)


## Pod to Pod

## Pod to Service Hub

## Service Hub to Service Hub

-->



<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin"
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "webid": {
		"authors": [
			"Andrei Sambra",
			"Henry Story",
			"Tim Berners-Lee"
		],
		"href": "https://dvcs.w3.org/hg/WebID/raw-file/tip/spec/identity-respec.html",
		"title": "WebID 1.0",
		"status": "Editor’s Draft",
		"publisher": "WebID Community Group",
		"deliveredBy": [
			"https://www.w3.org/community/webid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "spec-overview": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-overview/",
		"title": "Overview of the ResearcherPod specifications",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "spec-rulelanguage": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-rulelanguage/",
		"title": "Rule language for decentralized business processes",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "spec-notifications": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-notifications/",
		"title": "List of notifications",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "cron": {
		"authors": ["The Open Group"
    ],
		"href": "https://pubs.opengroup.org/onlinepubs/9699919799/",
		"title": "crontab - schedule periodic background work",
		"status": "Standard",
		"publisher": "IEEE"
	}
}
</pre>