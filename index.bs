<pre class='metadata'>
Title: List of notifications
Shortname: notifications
Level: 1
Status: LS
URL: https://mellonscholarlycommunication.github.io/spec-notifications
Editor: Miel Vander Sande, meemoo - [Flemish Institute for Archiving](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Patrick Hochstenbach, Ghent University, patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, Ghent University, ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, Ghent University, Jeroen.Werbrouck@ugent.be
Abstract: This document lists the possible notifications that can be used in the network. 
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table tbody > tr > th {
  background: #fff;
  color: #005A9C;
}
table th.last {
  border-right: none;
}
</style>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** project:

1. [Overview](/spec-overview/)
2. [Orchestrator](/spec-orchestrator/) 
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/)
5. [Artefact Lifecycle Event Log](/spec-eventlog/)
6. [Notifications](/spec-notifications/)

Introduction {#intro}
=====================

In a decentralized artefact exchange network, actors communicate using [[ldn|Linked Data Notifications]].
An actor notifies other interested actors about its activities that affect particular artefacts.
By being notified, the recepient is allowed to react (eg. by downloading the artefact) or respond to such events.
The notification payloads are expressed in [[activitystreams-vocabulary]] with additional domain-specific vocabularies such as [[schema-org|Schema.org]].

This document defines the different notification types that can be used and how to construct their payloads.


Activities {#activities}
===========

In the network, [[spec-overview#actor|actors]] can perform activities that are linked to a certain artefact. 
Actors are either [[spec-overview#service-hub|Service Hubs]] or [[spec-overview#maintainer|Maintainers]] (see [[#mappings]]).
By notifying eachother about these activities, actors can communicate and accomplish collaborative actions in a distributed setting. 
Activities that somehow impact an artefact's lifecycle result in [[spec-overview#artefact-lifecycle-event|lifecycle events]].

The table below summarizes the possible notification types that actors can exchange.

<table>
  <thead>
    <tr>
    <th>Activity
    <th>ActivityStreams 2.0 Type
    <th>Purpose
  <tbody>
      <tr>
      <th colspan="3">Disseminating lifecycle aspects</th>
    </tr>
    <tr>
      <td>Create
      <td>[[activitystreams-vocabulary#Create|as:Create]]
      <td>An [[spec-overview#actor|actor]] creates an [[spec-overview#artefact|artefact]] in its data pod.
    <tr>
      <td>Update
      <td>[[activitystreams-vocabulary#update|as:Update]]
      <td>An [[spec-overview#actor|actor]] updates an [[spec-overview#artefact|artefact]] in its data pod.
    <tr>
      <td>Delete
      <td>[[activitystreams-vocabulary#Remove|as:Remove]]
      <td>An [[spec-overview#actor|actor]] deletes an [[spec-overview#artefact|artefact]] from it's data pod.
  <tbody>
    <tr>
      <td>Announce
      <td>[[activitystreams-vocabulary#Announce|as:Announce]]
      <td>An [[spec-overview#actor|actor]] announces the existence of an [[spec-overview#artefact|artefact]].

  <tbody>
    <tr>
      <th colspan="3">Requesting services</th>
    </tr>
    <tr>
      <td>Offer
      <td>[[activitystreams-vocabulary#Offer|as:Offer]]
      <td>An [[spec-overview#actor|actor]] offers an [[spec-overview#artefact|artefact]] to another actor in order to conduct an [[spec-overview#activity|activity]] with that artefact as object.
    <tr>
      <td>Accept
      <td>[[activitystreams-vocabulary#Accept|as:Accept]]
      <td>A [[spec-overview#actor|actor]] accepts an [[spec-overview#artefact|artefact]] offer from another [[spec-overview#actor|actor]].
    <tr>
      <td>Reject
      <td>[[activitystreams-vocabulary#Reject|as:Reject]]
      <td>A [[spec-overview#actor|actor]] rejects an [[spec-overview#artefact|artefact]] offer from another [[spec-overview#actor|actor]].
    <tr>
      <td>Undo
      <td>[[activitystreams-vocabulary#Undo|as:Undo]]
      <td>An [[spec-overview#actor|actor]] retracts a prior [[spec-overview#activity|activity]].
</table>

Mappings {#mappings}
===========

Notifications in  a decentralized artefact exchange network communicate about [[activitystreams-vocabulary#activity]].
Therefore, the notification payload MUST be typed as `as:Activity`.
Payloads MUST also include the properties `as:origin`, `as:object`, and `as:target`, as defined in [[activitystreams-core#activities]]
The use of these properties is consistent across all notifications:

- `as:origin` refers to the sender of the activity; this can refer to the [[spec-overview#actor|actor]], the [[spec-overview#dashboard|dashboard]] or the [[spec-overview#orchestrator|orchestrator]]. 
- `as:object` refers to the [[spec-overview#artefact|artefact]] on which the `activity` is performed. 
- `as:target` refers to the destination of the activity; the other [[spec-overview#actor|actor]] that is being notified of this activity.

It SHOULD also include a reference to the actor that is responsible for the activity:

- `as:actor` refers to the [[spec-overview#actor|actor]] that performs or is expected to perform the `activity`. 

The terms in [[spec-overview#definitions]] should be mapped in a specific way, using specific types from [[activitystreams-vocabulary#actor-types]] and [[schema-org]].
This is outlined in more detail below.

## Actors

The actor of an activity MUST describe the [[activitystreams-vocabulary#actors]] that created the activity. 
It MUST use the following type mapping:

<table>
<thead>
  <tr>
  <th>Actor
  <th>Type
<tbody>
  <tr>
  <td>[[spec-overview#Service-Hub|Service Hub]]
  <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>
  <td>[[spec-overview#Maintainer|Maintainer]]
  <td>[[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]]
</table>

The actor MUST be identifyable with an HTTP URI, which SHOULD be a [[webid|WebID]].
It MAY have an `ldp:inbox` that refers to the inbox URI where the actor can receive replies.
The actor MAY have a name using `as:name`.

<div class=example>
Example of an organization as actor:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "id": "https://www.kb.nl#me",
  "type": ["Organization", "schema:Organization"],
  "inbox": "https://www.kb.nl#inbox",
  "name": "Koninklijke Bibliotheek"    
}
```
</div>

## Artefacts

The object of an activity MUST describe the artefact on which the activity has effect.
It MUST be of type [[activitystreams-vocabulary#Object|as:Object]], but it SHOULD have additional types imposed by the application domain (e.g., `schema:Dataset` in a cultural heritage network or `schema:Document` in a scholarly communication network).  

<div class=example>
Example of a Dataset as artefact:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "id": "https://www.kb.nl/datasets/1",
  "type": ["Object", "schema:Dataset"],
  "name": "Dataset about WOII"    
}
```
</div>

Payloads {#payloads}
===========

The following payload patterns can be used between actors.

Issue(1): Do we specify the semantics of AS payloads or do provide an additionaly vocabulary that encorporates these semantics?

## Disseminating lifecycle aspects

### Create

A new artefact was created by the actor.

Type: [[activitystreams-vocabulary#Create|as:Create]]

<table>
<thead>
  <tr>
    <th>Property
    <th>Type
<tbody>
  <tr>
    <td>actor  
    <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]] 
  <tr>
    <td>object
    <td>[[activitystreams-vocabulary#Object|as:Object]]
  <tr>
    <td>target
    <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>  
    <td>origin
    <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
</table>

<div class=example>
Example of a dataset that is being created by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek created Alba dataset",
  "@type": "Create",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "https://www.kb.nl/datasets/1",
    "type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "published": "2014-09-30T12:34:56Z"
}
```
</div>

### Update

An existing artefact was updated by the actor.

Type: [[activitystreams-vocabulary#Update|as:Update]]

<table>
<thead>
  <tr>
    <th>Property
    <th>Type
<tbody>
  <tr>
    <td>actor  
    <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]] 
  <tr>
    <td>object
    <td>[[activitystreams-vocabulary#Object|as:Object]]
  <tr>
    <td>target
    <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>  
    <td>origin
    <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
</table>

<div class=example>
Example of a dataset that is being updated by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek updates the Alba dataset",
  "type": "Update",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "https://www.kb.nl/datasets/1",
    "type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "published": "2021-02-15T12:34:56Z",
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Delete

A maintainer deletes an artefact. 

Type: [[activitystreams-vocabulary#Delete|as:Delete]]

<table>
<thead>
  <tr>
    <th>Property
    <th>Type
<tbody>
  <tr>
    <td>actor  
    <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]] 
  <tr>
    <td>object
    <td>[[activitystreams-vocabulary#Object|as:Object]]
  <tr>
    <td>target
    <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>  
    <td>origin
    <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
</table> 

<div class=example>
Example of a dataset that was by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek deleted Alba dataset",
  "type": "Delete",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": https://www.kb.nl/datasets/1,
  "origin": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "target": {
    "id": "http://meemoo.be#me",
    "type": ["Organization", "schema:Organization"],
    "name": "meemoo"  
  },
  "updated": "2021-01-28T19:56:20.114Z",
  "published": "2021-02-15T12:34:56Z"
}
```
</div>

## Requesting services

### Announce

A maintainer announces the existence of an artefact to a Service Hub. 

Type: [[activitystreams-vocabulary#Announce|as:Announce]]

<table>
<thead>
  <tr>
    <th>Property
    <th>Type
<tbody>
  <tr>
    <td>actor  
    <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]] 
  <tr>
    <td>object
    <td>[[activitystreams-vocabulary#Object|as:Object]]
  <tr>
    <td>target
    <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>  
    <td>origin
    <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
</table>

<div class=example>
Example of a dataset that is being created by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek announces Alba dataset",
  "type": "Announce",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "https://www.kb.nl/datasets/1",
    "type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Offer

A maintainer offers an artefact to a Service Hub in order to perform a service. 

Type: [[activitystreams-vocabulary#Offer|as:Offer]]

<table>
<thead>
  <tr>
    <th>Property
    <th>Type
<tbody>
  <tr>
    <td>actor  
    <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]] 
  <tr>
    <td>object
    <td>[[activitystreams-vocabulary#Object|as:Object]]
  <tr>
    <td>target
    <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>  
    <td>origin
    <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
</table> 

<div class=example>
Example of a dataset that was by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek offers Alba dataset to archive",
  "@type": "Offer",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "https://www.kb.nl/datasets/1",
    "type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "target": {
    "id": "http://meemoo.be#me",
    "type": ["Organization", "schema:Organization"],
    "name": "meemoo"  
  },
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Accept

A Service Hub accepts the artefact offered by an actor. 

Type: [[activitystreams-vocabulary#Accept|as:Accept]]

<table>
<thead>
  <tr>
    <th>Property
    <th>Type
<tbody>
  <tr>
    <td>actor  
    <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>
    <td>object
    <td>[[activitystreams-vocabulary#Object|as:Object]]
  <tr>
    <td>target
    <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]] 
  <tr>  
    <td>origin
    <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
</table> 

<div class=example>
Example of a dataset that was by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    {
      "schema": "http://schema.org/"
    }
  ],
  "summary": "Koninklijke Bibliotheek created Alba dataset",
  "@type": "Create",
  "actor": {
    "@id": "https://www.kb.nl#me",
    "@type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "@id": "https://www.kb.nl/datasets/1",
    "@type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "@id": "http://example.org/Adlib",
    "@type": "schema:SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Reject

A Service Hub rejects the artefact offered by an actor. 

Type: [[activitystreams-vocabulary#Reject|as:Reject]]

<table>
<thead>
  <tr>
    <th>Property
    <th>Type
<tbody>
  <tr>
    <td>actor  
    <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]] 
  <tr>
    <td>object
    <td>[[activitystreams-vocabulary#Object|as:Object]]
  <tr>
    <td>target
    <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>  
    <td>origin
    <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
</table> 

<div class=example>
Example of a dataset that was by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek created Alba dataset",
  "@type": "Create",
  "actor": {
    "@id": "https://www.kb.nl#me",
    "@type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "@id": "https://www.kb.nl/datasets/1",
    "@type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "@id": "http://example.org/Adlib",
    "@type": "schema:SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>


<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin"
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "webid": {
		"authors": [
			"Andrei Sambra",
			"Henry Story",
			"Tim Berners-Lee"
		],
		"href": "https://dvcs.w3.org/hg/WebID/raw-file/tip/spec/identity-respec.html",
		"title": "WebID 1.0",
		"status": "Editor’s Draft",
		"publisher": "WebID Community Group",
		"deliveredBy": [
			"https://www.w3.org/community/webid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "spec-overview": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-overview/",
		"title": "Overview of the ResearcherPod specifications",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "spec-rulelanguage": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-rulelanguage/",
		"title": "Rule language for decentralized business processes",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "spec-notifications": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-notifications/",
		"title": "List of notifications",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "cron": {
		"authors": ["The Open Group"
    ],
		"href": "https://pubs.opengroup.org/onlinepubs/9699919799/",
		"title": "crontab - schedule periodic background work",
		"status": "Standard",
		"publisher": "IEEE"
	}
}
</pre>