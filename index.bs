<pre class='metadata'>
Title: List of notifications
Shortname: notifications
Level: 1
Status: LD
URL: https://mellonscholarlycommunication.github.io/spec-notifications
Editor: Miel Vander Sande, [meemoo - Flemish Institute for Archives](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Patrick Hochstenbach, Ghent University, patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, Ghent University, ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, Ghent University, Jeroen.Werbrouck@ugent.be
Abstract: This document lists the possible notifications that can be used in the network. 
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table tbody > tr > th {
  background: #fff;
  color: #005A9C;
}
table th.last {
  border-right: none;
}
</style>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** project:

1. [Overview](/spec-overview/)
2. [Orchestrator](/spec-orchestrator/) 
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/)
5. [Artefact Lifecycle Event Log](/spec-eventlog/)
6. [Notifications](/spec-notifications/) (this document)
7. [Collector](/spec-collector/)

Introduction {#intro}
=====================

This document defines general requirements for using [[ldn|Linked Data Notifications]] in a decentralized artefact exchange network.
The goal of these requirements is application-agnostic communication between actors, 
which provides groundwork for any use case that applies a decentralized artefact exchange network and that might introduce additional requirements.

Notifications contain a payload that represents an activity.
This document lists the different activity types that can be used, covers the possible communication patterns between actors, and defines how to construct their payloads.
Payloads can be extended per use case by applying domain-specific vocabularies such as [[schema-org|Schema.org]].

Document Conventions
=====================

Within this document, the following namespace prefix bindings are used: 

<table>
  <thead>
    <tr>
      <th>Prefix
      <th>Namespace
  <tbody>
    <tr>
      <td>as
      <td>https://www.w3.org/ns/activitystreams#
    <tr>
      <td>ldp
      <td>http://www.w3.org/ns/ldp#
</table>

Examples of notification payloads use [[JSON-LD]] as syntax. 

Network communication patterns
==========

In a decentralized artefact exchange network, actors communicate by sending [[ldn|Linked Data Notifications]] to each other.
For instance, an actor can notify other interested actors about its activities that affect particular artefacts.
The receiving actor can then react (eg. by downloading the artefact or performing some follow-up action) and/or respond to such notification with a new notification.

An actor is either 

- a [[spec-overview#maintainer|Maintainer]] of a data pod; or 
- a [[spec-overview#service-hub|Service Hub]] that provides a certain service.

Interaction is thus possible between two maintainers, between two service hubs or between a maintainer and a service hub.
Depending on the type of interaction,
an actor takes the role of notification [[ldn#sender]] or [[ldn#receiver]].
This results in two possible communication patterns:

## One-way pattern

<pre class='include'>
path: images/one-way.svg
</pre>

In a <dfn>one-way pattern</dfn>, the sender of a notification should not expect a direct reply from the receiver. 
This style of communication is more informative. 
A one-way pattern is used when another actor needs to be made aware of an activity, but not necessarily needs to respond.

## Request-response pattern

<pre class='include'>
path: images/request-response.svg
</pre>

In a <dfn>request-response pattern</dfn>, the sender of a notification can expect the receiver to send a notification in return.
This style of communication is more transactional. 
A request-response pattern is used when some service is required from another actor and result of the service attempt is delivered as a response.
This can include an acknowledgment phase, where before attempting the service, the actor indicates that it is willing to do the attempt or not in an additional response.  

Activities {#activities}
===========

A notification is sent by a [[spec-overview#actor|network actor]] to inform another [[spec-overview#actor|network actor]] about an activity.
An <dfn>Activity</dfn> is some action that occurred, related to a certain [=artefact=] in the network.
Activities are contained in the notification **payload**.

Notification payloads are expressed in [[activitystreams-vocabulary]] and use [[JSON-LD]] as default syntax (other RDF syntaxes are allowed as well). 
A payload is uniquely identified, indicates the type of activity it is describing, and includes some descriptive metadata about the activity.
It also describes the parties involved:

- the actor who performed the activity (the <dfn>actor</dfn>);
- the intended [[ldn#receiver]]; ie. the actor who is supposed to receive the notification (the <dfn>target</dfn>);
- the [[ldn#sender]]; ie. software or [=actor=] who was responsible for sending the notification (the <dfn>origin</dfn>);
- the artefact or former activity that this activity is about (the <dfn>object</dfn>).

The minimal example below illustrates an interaction between the two [=human actors=] Bob and Alice.
Bob ([=actor=]) notifies Alice ([=target=]) using his network dashboard ([=origin=]) to inform her about the artefact ([=object=]) he created.

<pre class=include-code>
path: examples/minimal.jsonld
highlight: json
show: 
</pre>

## Types of activities

Notification payloads apply the [[activitystreams-vocabulary#activity|ActivityStreams 2.0 vocabulary]].
Therefore, the notification payload MUST be typed as a `as:Activity` or as one of its more specialized subtypes.

A decentralized artefact exchange network only allows a limited set of [[activitystreams-vocabulary#activity-types|AS2.0 Activity Types]].
Activities, along with their types, are divided into two categories:

- Activities that are about facts related to an artefact. This includes the types `Create`, `Remove`, and `Update`. These activities are used in a [=one-way pattern=] communication.
- Activities that are about requesting services. This includes the types `Offer`, `Reject`, `Accept`, `Undo`, and `Announce`. These activities are used in a [=request-response pattern=] communication.

The following table summarizes the possible activity types according to category.

<table>
  <thead>
    <tr>
    <th>Activity Type
    <th>Purpose
  <tbody>
      <tr>
      <th colspan="2">Activities about facts related to an artefact</th>
    </tr>
    <tr>
      <td>[[activitystreams-vocabulary#Create|as:Create]]
      <td>An [[spec-overview#actor|actor]] created an [[spec-overview#artefact|artefact]] in its data pod.
    <tr>
      <td>[[activitystreams-vocabulary#update|as:Update]]
      <td>An [[spec-overview#actor|actor]] updated an [[spec-overview#artefact|artefact]] in its data pod.
    <tr>
      <td>[[activitystreams-vocabulary#Remove|as:Remove]]
      <td>An [[spec-overview#actor|actor]] deletes an [[spec-overview#artefact|artefact]] from its data pod.
  <tbody>
    <tr>
      <th colspan="2">Activities about requesting services</th>
    </tr>
    <tr>
      <td>[[activitystreams-vocabulary#Announce|as:Announce]]
      <td>
      An [[spec-overview#actor|actor]] announces the **existence** of an [[spec-overview#artefact|artefact]]. 
      This activity is different from [[activitystreams-vocabulary#Create|as:Create]], which denotes a fact (ie. the what, when, where and how a new artefact was created).
      With [[activitystreams-vocabulary#Announce|as:Announce]], the sender doesn't say anything about when the artefact was created, but only desires that the consumer is notified about its existence.
    <tr>
      <td>[[activitystreams-vocabulary#Offer|as:Offer]]
      <td>
      An [[spec-overview#actor|actor]] offers an [[spec-overview#artefact|artefact]] to another actor in order to invoke a service. 
      The execution of this service may lead to a new [[spec-overview#activity|activity]] with the same artefact as the object.
    <tr>
      <td>[[activitystreams-vocabulary#Accept|as:Accept]]
      <td>
        An [[spec-overview#actor|actor]] accepts to execute a service on a specified artefact, as requested by another actor.
        This is a direct reply to a received [[activitystreams-vocabulary#Offer|as:Offer]].
    <tr>
      <td>[[activitystreams-vocabulary#Reject|as:Reject]]
      <td>
        An [[spec-overview#actor|actor]] rejects to execute a service on a specified artefact, because it is somehow unable to fulfill the request by another actor.
        This is a direct reply to a received [[activitystreams-vocabulary#Offer|as:Offer]].
    <tr>
      <td>[[activitystreams-vocabulary#Undo|as:Undo]]
      <td>An [[spec-overview#actor|actor]] retracts a prior [[spec-overview#activity|activity]], which can be of any of the above types.
</table>

## Identifying an activity ## {#activity-id}

To establish robust communication on a decentralized artefact exchange network,
activities have to be at least uniquely indentifyable within the scope of the network.
Therefore, an identifier of any kind used MUST be a valid [[IRI]].

There are two identifiers who operate at the level of the notification:

- the <dfn>notification identifier</dfn>, which is the minted [[URL]] at the end of the target actor as part of the [=inbox=]; and
- the <dfn>activity identifier</dfn>, which is the [[IRI]] enclosed in the notification payload as value of the `id` property in the activity description.

When linking to an activity inside a notification, for instance in a reply, one MUST always use the [=activity identifier=]. 
The [=notification identifier=] MUST only be used to identify and retrieve the posted notification, and therefore SHOULD resolve to what was origally posted by the [[ldn#sender]].
A [[ldn#sender]] SHOULD define an [=activity identifier=] for every notification. 
The [[ldn#receiver]] MUST NOT define or alter the [=activity identifier=] of a received notification.
The [[ldn#receiver|receiver]] MAY mint any [=notification identifier=], which in most cases, is a derivative of the [=inbox=] resource [[URL]], but can be any [[URL]] of choice.

## The object of an activity ## {#activity-object}

All [=activities=] MUST contain a [=object=] using the `as:object` predicate.
Depending on the activity type, the [=object=] can refer to an [=artefact=] or an [=activity=].

Some activities directly impact or refer to an artefact.
Hence, if an [=activity=] is of type `as:Create`,`as:Remove`,`as:Update`,`as:Offer`, or `as:Announce`,
the object MUST describe the [=artefact=] on which the activity has effect.
An artefact MUST be of type [[activitystreams-vocabulary#Object|as:Object]] or one of the [[activitystreams-vocabulary#object-types|ActivityStreams Object Types]].
Additionally, an artefact MAY have additional types imposed by the application domain (e.g., `schema:Dataset` in a cultural heritage network or `schema:Document` in a scholarly communication network).

<div class=example>
Example of a document as artefact:

``` json
{
  "@context": "https://www.w3.org/ns/activitystreams/",
  "id": "https://example.org/publications/1",
  "type": "Document",
  "name": "Publication about WOII"    
}
```
</div>

Some activities can only exist because of a prior activity, such as a response.
Hence, if an [=activity=] is of type `as:Reject`, `as:Accept`, or `as:Undo`, the object MUST be another [=activity=] with type `as:Activity`.
In case of `as:Reject` and `as:Accept`, the object SHOULD be an activity typed as `as:Offer`.

<div class=example>
Example of an Offer as object:

``` json
{
  "@context": "https://www.w3.org/ns/activitystreams/",
  "id": "http://example.org/bob/notifications/aa534f09-76ce-4638-ad28-711622c47cc1",
  "type": "Offer",
  "name": "Request to archive publication about WOII"    
}
```
</div>

Issue(17): can artefacts be rejected?

An [=object=] MUST contain an identifier, which must be an [[URI]].
The [=object=] identifier SHOULD be dereferenceable, so possible artefacts can be retrieved.

A description of the object SHOULD be delivered in one of two methods:

- <dfn>out-of-band</dfn>: an RDF description is available by dereferencing the [=object=] identifier;
- <dfn>in-band</dfn>: the object is described as part of the notification payload.

If a description is given [=in-band=],
its contents MUST be given priority to a dereferenceable description.
[=Receivers=] MAY also dereference the object's identifier to retrieve an additional [=out-of-band=] description.
In case conflicts arise between both descriptions, the most recent description MUST be given priority.
This can be identified by comparing the last-modified date of the HTTP response with the [=activity's=] published date in `as:published`.

## Addressing the receiver and sender ## {#activity-addressing}

A notification that is sent to a [[ldn#receiver]] is delivered to an [=inbox=].
Since inboxes can be shared by more than one actor, the notification's payload should indicate what [[spec-overview#actor|network actor]] it intends to address.
Thus, an activity MUST contain a [=target=] using the `as:target` predicate.

Accordingly, the payload should also indicate which [[spec-overview#actor|network actor]] performed the activity.
Hence, an activity MUST also contain an [=actor=] using the `as:actor` predicate.

Both the [=target=] and [=actor=] MUST be identifyable with an HTTP URI, which SHOULD be a [[webid|WebID]].
They MUST be of the following type:

- [[activitystreams-vocabulary#Service|as:Service]] in case the receiving actor is a [[spec-overview#Service-Hub|Service Hub]];
- [[activitystreams-vocabulary#Person|as:Person]], [[activitystreams-vocabulary#Organization|as:Organization]], or [[activitystreams-vocabulary#Application|as:Application]] in case the receiving actor is a [[spec-overview#Maintainer|Maintainer]] and an individual, organization, or a software application, respectively.

Issue(18): How to define Service Hub types?

The [=actor=] and [=target=] SHOULD have an `ldp:inbox` that refers to the inbox [[URI]] where the actor can be reached.
They MAY have a name using `as:name`.

Lastly, a notification can also provide more information on how the notification got sent.
Therefore, an activity SHOULD provide an [=origin=] using the `as:origin` predicate.
It refers to the software component, such as the [=orchestrator=], that was responsible for sending the activity over the network.
Hence, property `origin` MAY be used to indicate whether a [=Dashboard=] or an [=Orchestrator=] was involved in performing the activity and sending then notification. 
The [=origin=] MAY also have an `ldp:inbox` that refers to an inbox [[URI]] where it can be reached.

When a [[ldn#receiver]] intends to respond to a notification, thus switching to the role of [[ldn#sender]],
it should be able to derive a valid [=inbox=] URL from the notification payload.
In this case, it MUST use the value of `ldp:inbox` in the [=actor=] description.
If the [=actor=] does not contain a `ldp:inbox`, the response notification MUST be sent to the [=origin=]'s `ldp:inbox`. 

## Interpreting dates

An notification payload MAY include a `as:published` or `as:updated` predicate to indicate when the activity was published and when it was last updated.
The value MUST be a valid [[xmlschema11-2#dateTime|xsd:dateTime]].
Publication and update values MUST always refer to the [=activity=] and MUST NOT refer to its [=object=].

One-way notification patterns
=============================

This section covers notification patterns using activity types `as:Create`, `as:Remove`, `as:Update`, and `as:Announce`.
The [[JSON-LD]] payload MUST contain at least the following properties:

- `id`: this MUST contain the [=activity identifier=], which MUST be a valid [[URI]] (see [[#activity-id]]). 
- `type`: this MUST include one of the types [[activitystreams-vocabulary#Create|as:Create]], [[activitystreams-vocabulary#Remove|as:Remove]], [[activitystreams-vocabulary#Update|as:Update]], or [[activitystreams-vocabulary#Announce|as:Announce]]. It SHOULD also contain the generic type [[activitystreams-vocabulary#Activity|as:Activity]].
- `actor`: the [=sender=] of the notification. This MUST contain a [[URI]] identifying the [=actor=] who created the notification  and include the type [[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]] (see [[#activity-addressing]]).
- `target`: the intended [=receiver=] of the notification. This MUST contain a [[URI]] identifying the targeted [=actor=] and include the type [[activitystreams-vocabulary#Organization|as:Organization]], [[activitystreams-vocabulary#Person|as:Person]] or [[activitystreams-vocabulary#Service|as:Service]] (see [[#activity-addressing]]).
- `object`: the artefact that this activity is about. This MUST contain at least a [[URI]] identifying the [=artefact=] and MUST provide an [=in-band=] or [=out-of-band=] description (see [[#activity-object]]).

The [[JSON-LD]] payload SHOULD also contain the following property:
- `origin`: the software component that was responsible for sending the activity over the network. It MUST include the type [[activitystreams-vocabulary#Application|as:Application]].

## Pattern 1: Maintainer has created a new artefact

This pattern is used to disseminate new artefacts.
A [=data pod=] [=maintainer=] makes a [=Service Hub=] or another [=maintainer=] aware of the creation of that artefact,
without expecting immediate action.


<pre class=include-code>
path: examples/create.jsonld
highlight: json
show: 
</pre>

</div>

## Pattern 2: Maintainer has updated an existing artefact

This pattern is used to inform involved actors about artefact changes.
A [=data pod=] [=maintainer=] informs a [=Service Hub=] or another [=maintainer=] without obligation that the artefact has been updated and follow-up action might be needed.

<pre class=include-code>
path: examples/update.jsonld
highlight: json
show: 
</pre>

## Pattern 3: Maintainer has removed an artefact

This pattern is used to inform involved actors about deleted artefacts.
A [=maintainer=] informs a [=Service Hub=] or another [=maintainer=] without obligation that an artefact has been removed from its [=data pod=] and follow-up action might be needed.


<pre class=include-code>
path: examples/remove.jsonld
highlight: json
show: 
</pre>

## Pattern 4: Maintainer draws attention to an artefact

This pattern is used to inform involved actors about an existing artefact.
A [=maintainer=] informs a [=Service Hub=] or another [=maintainer=] without obligation that an artefact exists in its [=data pod=].

<pre class=include-code>
path: examples/announce.jsonld
highlight: json
show: 
</pre>

Request-response notification patterns
======================================

This section covers notification patterns using activity types `as:Offer`, `as:Reject`, `as:Accept`, `as:Undo`, and `as:Announce`.
These patterns are used in interactions where a sender sends a notification to a receiver (<dfn>request notification</dfn>) and eventually expects to receive a new notification as reply (<dfn>response notification</dfn>).

An actor employs a [=request notification=] to offer one of its [=artefacts=] for some activity to be conducted by a second actor.
Therefore, the enclosed activity is always of type `as:Offer`.
The receiving actor can decide to respond in a direct or indirect way:

- a <dfn>direct reponse notification</dfn> is about accepting or rejecting the offer in the [=request notification=]. For example, a scholar accepts a review request from a fellow peer; the review still needs to be done when the response is issued.
- an <dfn>indirect reponse notification</dfn> is a follow-up activity that is a result of the [=request notification=], but does not directly address it. For example, a scholar announces a new review after receiving a review request from a fellow peer; the revies has been done when the response is issued.

## Pattern 5: A service request with direct response

This pattern is used where a service is requested and immediate acknowledgment is required, eg. to provide guarentees that the service will be conducted.
Hence, a direct response is always about the activity it is replying to.

A request [[JSON-LD]] payload MUST contain at least the following properties:

- `id`: this MUST contain the [=activity identifier=], which MUST be a valid [[URI]] (see [[#activity-id]]). 
- `type`: this MUST include the type [[activitystreams-vocabulary#Offer|as:Offer]]. It SHOULD also contain the generic type [[activitystreams-vocabulary#Activity|as:Activity]].
- `actor`: the [=sender=] of the notification. This MUST contain a [[URI]] identifying the [=actor=] who created the notification  and include the type [[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]] (see [[#activity-addressing]]).
- `target`: the intended [=receiver=] of the notification. This MUST contain a [[URI]] identifying the targeted [=actor=] and include the type [[activitystreams-vocabulary#Organization|as:Organization]], [[activitystreams-vocabulary#Person|as:Person]] or [[activitystreams-vocabulary#Service|as:Service]] (see [[#activity-addressing]]).
- `object`: the artefact that this activity is about. This MUST contain at least a [[URI]] identifying the [=artefact=] and MUST provide an [=in-band=] or [=out-of-band=] description (see [[#activity-object]]).

The [[JSON-LD]] payload SHOULD also contain the following property:
- `origin`: the software component that was responsible for sending the activity over the network (eg. the [=Dashboard=] or [=Orchestrator=] components). It MUST include the type [[activitystreams-vocabulary#Application|as:Application]]. 

<pre class=include-code>
path: examples/offer.jsonld
highlight: json
show: 
</pre>

A response [[JSON-LD]] payload MUST contain at least the following properties:
- `id`: this MUST contain the [=activity identifier=], which MUST be a valid [[URI]] (see [[#activity-id]]). 
- `type`: this MUST include one of the types [[activitystreams-vocabulary#Reject|as:Reject]] or [[activitystreams-vocabulary#Accept|as:Accept]]. It SHOULD also contain the generic type [[activitystreams-vocabulary#Activity|as:Activity]].
- `actor`: the [=sender=] of the notification. This MUST contain a [[URI]] identifying the [=actor=] who created the notification  and include the type [[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]] (see [[#activity-addressing]]).
- `target`: the intended [=receiver=] of the notification. This MUST contain a [[URI]] identifying the targeted [=actor=] and include the type [[activitystreams-vocabulary#Organization|as:Organization]], [[activitystreams-vocabulary#Person|as:Person]] or [[activitystreams-vocabulary#Service|as:Service]] (see [[#activity-addressing]]).
- `object`: the [=activity=] that this new activity is replying on. This MUST contain at least a [[URI]] identifying the [=activity=].

The [[JSON-LD]] payload SHOULD also contain the following property:
- `inReplyTo`: points to the [=activity identifier=] of the request notification to which this activity is a response. In a direct response, this MUST be equivalent to the value of the `object` property. It MUST be a [[URI]] and MAY NOT have further in-band description.
- `context`: the original [=artefact=] in a notification thread, ie. the [=object=] of the [=request notification=]. This MUST contain at least a [[URI]] identifying the [=artefact=] and MUST provide an [=in-band=] or [=out-of-band=] description (see [[#activity-object]]).
- `origin`: the software component that was responsible for sending the activity over the network (eg. the [=Dashboard=] or [=Orchestrator=] components). It MUST include the type [[activitystreams-vocabulary#Application|as:Application]]. 

Option 1: A Service Hub *accepts* the offer by an actor. 

<pre class=include-code>
path: examples/direct-response-accept.jsonld
highlight: json
show: 
</pre>

Option 2: A Service Hub *rejects* the offer by an actor. 

<pre class=include-code>
path: examples/direct-response-reject.jsonld
highlight: json
show: 
</pre>

## Pattern 6: A service request with indirect response

This pattern is used where a service is requested and no immediate acknowledgment is required,
as long as a follow-up activity is eventually returned, ie. 
a [=service hub=] informs a [=maintainer=] that it processed an [=artefact=] as a result or a prior offer.
Hence, an indirect response is about an [=artefact=] that is somehow related to the activity in the [=request notification=].

A request [[JSON-LD]] payload MUST contain at least the following properties:

- `id`: this MUST contain the [=activity identifier=], which MUST be a valid [[URI]] (see [[#activity-id]]). 
- `type`: this MUST include the type [[activitystreams-vocabulary#Offer|as:Offer]]. It SHOULD also contain the generic type [[activitystreams-vocabulary#Activity|as:Activity]].
- `actor`: the [=sender=] of the notification. This MUST contain a [[URI]] identifying the [=actor=] who created the notification  and include the type [[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]] (see [[#activity-addressing]]).
- `target`: the intended [=receiver=] of the notification. This MUST contain a [[URI]] identifying the targeted [=actor=] and include the type [[activitystreams-vocabulary#Organization|as:Organization]], [[activitystreams-vocabulary#Person|as:Person]] or [[activitystreams-vocabulary#Service|as:Service]] (see [[#activity-addressing]]).
- `object`: the artefact that this activity is about. This MUST contain at least a [[URI]] identifying the [=artefact=] and MUST provide an [=in-band=] or [=out-of-band=] description (see [[#activity-object]]).

The [[JSON-LD]] payload SHOULD also contain the following property:
- `origin`: the software component that was responsible for sending the activity over the network (eg. the [=Dashboard=] or [=Orchestrator=] components). It MUST include the type [[activitystreams-vocabulary#Application|as:Application]]. 

<pre class=include-code>
path: examples/offer.jsonld
highlight: json
show: 
</pre>

A indirect response [[JSON-LD]] payload MUST contain at least the following properties:
- `id`: this MUST contain the [=activity identifier=], which MUST be a valid [[URI]] (see [[#activity-id]]). 
- `type`: this MUST include the type [[activitystreams-vocabulary#Announce|as:Announce]]. It SHOULD also contain the generic type [[activitystreams-vocabulary#Activity|as:Activity]].
- `actor`: the [=sender=] of the notification. This MUST contain a [[URI]] identifying the [=actor=] who created the notification  and include the type [[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]] (see [[#activity-addressing]]).
- `target`: the intended [=receiver=] of the notification. This MUST contain a [[URI]] identifying the targeted [=actor=] and include the type [[activitystreams-vocabulary#Organization|as:Organization]], [[activitystreams-vocabulary#Person|as:Person]] or [[activitystreams-vocabulary#Service|as:Service]] (see [[#activity-addressing]]).
- `object`: the [=artefact=] that this activity is about, which is a result of or related to the [=request=] notification. This MUST contain at least a [[URI]] identifying the [=artefact=] and MUST provide an [=in-band=] or [=out-of-band=] description (see [[#activity-object]]).

The [[JSON-LD]] payload SHOULD also contain the following property:
- `inReplyTo`: points to the [=activity identifier=] of the request notification to which this activity is a response. This MUST be a [[URI]] and MAY NOT have further in-band description.
- `context`: the original [=artefact=] in a notification thread, ie. the [=object=] of the [=request notification=]. This MUST contain at least a [[URI]] identifying the [=artefact=] and MUST provide an [=in-band=] or [=out-of-band=] description (see [[#activity-object]]). In cases where there is only a single artefact (eg. an artefact has been archived on request), this MAY equivalent to the artefact in the `object` property. 
- `origin`: the software component that was responsible for sending the activity over the network (eg. the [=Dashboard=] or [=Orchestrator=] components). It MUST include the type [[activitystreams-vocabulary#Application|as:Application]]. 

<pre class=include-code>
path: examples/indirect-response-announce.jsonld
highlight: json
show: 
</pre>

## Pattern 7: Retracting a prior offer

This pattern is used where a prior offer needs to be retracted.
Hence, a retraction is about an [=artefact=] that is somehow related to the activity in the [=request notification=].

A [[JSON-LD]] payload MUST contain at least the following properties:

- `id`: this MUST contain the [=activity identifier=], which MUST be a valid [[URI]] (see [[#activity-id]]). 
- `type`: this MUST include the type [[activitystreams-vocabulary#Undo|as:Undo]]. It SHOULD also contain the generic type [[activitystreams-vocabulary#Activity|as:Activity]].
- `actor`: the [=sender=] of the notification. This MUST contain a [[URI]] identifying the [=actor=] who created the notification  and include the type [[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]] (see [[#activity-addressing]]).
- `target`: the intended [=receiver=] of the notification. This MUST contain a [[URI]] identifying the targeted [=actor=] and include the type [[activitystreams-vocabulary#Organization|as:Organization]], [[activitystreams-vocabulary#Person|as:Person]] or [[activitystreams-vocabulary#Service|as:Service]] (see [[#activity-addressing]]).
- `object`: the [=activity=] that this new activity is retracting. This MUST contain at least a [[URI]] identifying the [=activity=] and MUST be of type [[activitystreams-vocabulary#Offer|as:Offer]].

The [[JSON-LD]] payload SHOULD also contain the following property:
- `context`: the original [=artefact=] in a notification thread, ie. the [=object=] of the [=request notification=]. This MUST contain at least a [[URI]] identifying the [=artefact=] and MUST provide an [=in-band=] or [=out-of-band=] description (see [[#activity-object]]).
- `origin`: the software component that was responsible for sending the activity over the network (eg. the [=Dashboard=] or [=Orchestrator=] components). It MUST include the type [[activitystreams-vocabulary#Application|as:Application]].

<pre class=include-code>
path: examples/undo.jsonld
highlight: json
show: 
</pre>


<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin"
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "webid": {
		"authors": [
			"Andrei Sambra",
			"Henry Story",
			"Tim Berners-Lee"
		],
		"href": "https://dvcs.w3.org/hg/WebID/raw-file/tip/spec/identity-respec.html",
		"title": "WebID 1.0",
		"status": "Editor’s Draft",
		"publisher": "WebID Community Group",
		"deliveredBy": [
			"https://www.w3.org/community/webid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "spec-overview": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-overview/",
		"title": "Overview of the ResearcherPod specifications",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "spec-rulelanguage": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-rulelanguage/",
		"title": "Rule language for decentralized business processes",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "spec-notifications": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-notifications/",
		"title": "List of notifications",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "cron": {
		"authors": ["The Open Group"
    ],
		"href": "https://pubs.opengroup.org/onlinepubs/9699919799/",
		"title": "crontab - schedule periodic background work",
		"status": "Standard",
		"publisher": "IEEE"
	}
}
</pre>