<pre class='metadata'>
Title: List of notifications
Shortname: notifications
Level: 1
Status: LD
URL: https://mellonscholarlycommunication.github.io/spec-notifications
Editor: Miel Vander Sande, [meemoo - Flemish Institute for Archives](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Patrick Hochstenbach, Ghent University, patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, Ghent University, ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, Ghent University, Jeroen.Werbrouck@ugent.be
Abstract: This document lists the possible notifications that can be used in the network. 
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table tbody > tr > th {
  background: #fff;
  color: #005A9C;
}
table th.last {
  border-right: none;
}
</style>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** project:

1. [Overview](/spec-overview/)
2. [Orchestrator](/spec-orchestrator/) 
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/)
5. [Artefact Lifecycle Event Log](/spec-eventlog/)
6. [Notifications](/spec-notifications/) (this document)
7. [Collector](/spec-collector/)

Introduction {#intro}
=====================

This document defines general requirements for using [[ldn|Linked Data Notifications]] in a decentralized artefact exchange network.
The goal of these requirements is application-agnostic communication between actors, 
which provides groundwork for any use case that applies a decentralized artefact exchange network and that might introduce additional requirements.

Notifications contain a payload that represents an activity.
This document lists the different activity types that can be used, covers the possible communication patterns between actors, and defines how to construct their payloads.
Payloads can be extended per use case by applying domain-specific vocabularies such as [[schema-org|Schema.org]].

Document Conventions
=====================

Within this document, the following namespace prefix bindings are used: 

<table>
  <thead>
    <tr>
      <th>Prefix
      <th>Namespace
  <tbody>
    <tr>
      <td>as
      <td>https://www.w3.org/ns/activitystreams#
    <tr>
      <td>schema
      <td>https://schema.org
    <tr>
      <td>ldp
      <td>http://www.w3.org/ns/ldp#
</table>

Examples of notification payloads use [[JSON-LD]] as syntax. 

Network communication patterns
==========

In a decentralized artefact exchange network, actors communicate by sending [[ldn|Linked Data Notifications]] to each other.
For instance, an actor can notify other interested actors about its activities that affect particular artefacts.
The receiving actor can then react (eg. by downloading the artefact or performing some follow-up action) and/or respond to such notification with a new notification.

An actor is either 

- a [[spec-overview#maintainer|Maintainer]] of a data pod; or 
- a [[spec-overview#service-hub|Service Hub]] that provides a certain service.

Interaction is thus possible between two maintainers, between two service hubs or between a maintainer and a service hub.
Depending on the type of interaction,
an actor takes the role of notification [[ldn#sender]] or [[ldn#receiver]].
This results in two possible communication patterns:

## One-way pattern

Issue: add diagram

The sender of a notification should not expect a direct reply from the receiver. 
This style of communication is more informative. 
A one-way pattern is used when actors need to be made aware of an activity, but not necessarily need to respond.

## Request-response pattern

Issue: add diagram

The sender of a notification can expect the receiver to send a notification in return, as a direct reply or as acknowledgment.
A request-response pattern is used when an actor needs confirmation that the corresponding actor has received the notification,
and what the resulting action will be. 


Activities {#activities}
===========

A notification is sent by a [[spec-overview#actor|network actor]] to inform another [[spec-overview#actor|network actor]] about an activity.
An <dfn>Activity</dfn> is some action that occurred, related to a certain [=artefact=] in the network.
Activities are contained in the notification **payload**.

Notification payloads are expressed in [[activitystreams-vocabulary]] and use [[JSON-LD]] as default syntax (other RDF syntaxes are allowed as well). 
A payload is uniquely identified, indicates the type of activity it is describing, and includes some descriptive metadata about the activity.
It also describes the parties involved:

- the actor who performed the activity (the <dfn>actor</dfn>);
- the intended [[ldn#receiver]]; ie. the actor who is supposed to receive the notification (the <dfn>target</dfn>);
- the [[ldn#sender]]; ie. software or [=actor=] who was responsible for sending the notification (the <dfn>origin</dfn>);
- the artefact or former activity that this activity is about (the <dfn>object</dfn>).

The minimal example below illustrates an interaction between the two [=human actors=] Bob and Alice.
Bob ([=actor=]) notifies Alice ([=target=]) using his network dashboard ([=origin=]) to inform her about the artefact ([=object=]) he created.

<pre class=include-code>
path: examples/minimal.jsonld
highlight: json
show: 
</pre>

## Types of activities

Notification payloads apply the [[activitystreams-vocabulary#activity|ActivityStreams 2.0 vocabulary]].
Therefore, the notification payload MUST be typed as a `as:Activity` or as one of its more specialized subtypes.

A decentralized artefact exchange network only allows a limited set of [[activitystreams-vocabulary#activity-types|AS2.0 Activity Types]].
Activities, along with their types, are divided into two categories:

- Activities that are about facts related to an artefact. This includes the types `Create`, `Remove`, and `Update`. These activities are used in a one-way communication pattern.
- Activities that are about requesting services. This includes the types `Offer`, `Reject`, `Accept`, `Undo`, and `Announce`. These activities are used in a requestâ€“response communication pattern.

The following table summarizes the possible activity types according to category.

<table>
  <thead>
    <tr>
    <th>Activity Type
    <th>Purpose
  <tbody>
      <tr>
      <th colspan="2">Activities about facts related to an artefact</th>
    </tr>
    <tr>
      <td>[[activitystreams-vocabulary#Create|as:Create]]
      <td>An [[spec-overview#actor|actor]] created an [[spec-overview#artefact|artefact]] in its data pod.
    <tr>
      <td>[[activitystreams-vocabulary#update|as:Update]]
      <td>An [[spec-overview#actor|actor]] updated an [[spec-overview#artefact|artefact]] in its data pod.
    <tr>
      <td>[[activitystreams-vocabulary#Remove|as:Remove]]
      <td>An [[spec-overview#actor|actor]] deletes an [[spec-overview#artefact|artefact]] from its data pod.
  <tbody>
    <tr>
      <th colspan="2">Activities about requesting services</th>
    </tr>
    <tr>
      <td>[[activitystreams-vocabulary#Announce|as:Announce]]
      <td>
      An [[spec-overview#actor|actor]] announces the **existence** of an [[spec-overview#artefact|artefact]]. 
      This activity is different from [[activitystreams-vocabulary#Create|as:Create]], which denotes a fact (ie. the what, when, where and how a new artefact was created).
      With [[activitystreams-vocabulary#Announce|as:Announce]], the sender doesn't say anything about when the artefact was created, but only desires that the consumer is notified about its existence.
    <tr>
      <td>[[activitystreams-vocabulary#Offer|as:Offer]]
      <td>
      An [[spec-overview#actor|actor]] offers an [[spec-overview#artefact|artefact]] to another actor in order to invoke a service. 
      The execution of this service may lead to a new [[spec-overview#activity|activity]] with the same artefact as the object.
    <tr>
      <td>[[activitystreams-vocabulary#Accept|as:Accept]]
      <td>
        An [[spec-overview#actor|actor]] accepts to execute a service on a specified artefact, as requested by another actor.
        This is a direct reply to a received [[activitystreams-vocabulary#Offer|as:Offer]].
    <tr>
      <td>[[activitystreams-vocabulary#Reject|as:Reject]]
      <td>
        An [[spec-overview#actor|actor]] rejects to execute a service on a specified artefact, because it is somehow unable to fulfill the request by another actor.
        This is a direct reply to a received [[activitystreams-vocabulary#Offer|as:Offer]].
    <tr>
      <td>[[activitystreams-vocabulary#Undo|as:Undo]]
      <td>An [[spec-overview#actor|actor]] retracts a prior [[spec-overview#activity|activity]], which can be of any of the above types.
</table>

## Identifying an activity

To establish robust communication on a decentralized artefact exchange network,
activities have to be at least uniquely indentifyable within the scope of the network.
Therefore, an identifier of any kind used MUST be a valid [[IRI]].

There are two identifiers who operate at the level of the notification:

- the <dfn>notification identifier</dfn>, which is the minted [[URL]] at the end of the target actor as part of the [=inbox=]; and
- the <dfn>activity identifier</dfn>, which is the [[IRI]] enclosed in the notification payload as value of the `id` property in the activity description.

When linking to an activity inside a notification, for instance in a reply, one MUST always use the [=activity identifier=]. 
The [=notification identifier=] MUST only be used to identify and retrieve the posted notification, and therefore SHOULD resolve to what was origally posted by the [[ldn#sender]].
A [[ldn#sender]] SHOULD define an [=activity identifier=] for every notification. 
The [[ldn#receiver]] MUST NOT define or alter the [=activity identifier=] of a received notification.
He MAY mint any [=notification identifier=], which in most cases, is a derivative of the [=inbox=] resource [[URL]], but can be any [[URL]] of choice.

## The object of an activity

All [=activities=] MUST contain a [=object=] using the `as:object` predicate.
Depending on the activity type, the [=object=] can refer to an [=artefact=] or an [=activity=].

Some activities directly impact or refer to an artefact.
Hence, if an [=activity=] is of type `as:Create`,`as:Remove`,`as:Update`,`as:Offer`, or `as:Announce`,
the object MUST describe the [=artefact=] on which the activity has effect.
An artefact MUST be of type [[activitystreams-vocabulary#Object|as:Object]] or one of the [[activitystreams-vocabulary#object-types | ActivityStreams Object Types]].
Additionally, an artefact SHOULD have additional types imposed by the application domain (e.g., `schema:Dataset` in a cultural heritage network or `schema:Document` in a scholarly communication network).

<div class=example>
Example of a document as artefact:

``` json
{
  "@context": "https://www.w3.org/ns/activitystreams/",
  "id": "https://example.org/publications/1",
  "type": ["Document"],
  "name": "Dataset about WOII"    
}
```
</div>

Some activities can only exist because of a prior activity, such as a response.
Hence, if an [=activity=] is of type `as:Reject`, `as:Accept`, or `as:Undo`, the object MUST be another [=activity=] with type `as:Activity`.
In case of `as:Reject` and `as:Accept`, the object SHOULD be an activity typed as `as:Offer`.

<div class=example>
Example of an Offer as object:

``` json
{
  "@context": "https://www.w3.org/ns/activitystreams/",
  "id": "https://example.org/offers",
  "type": ["Offer"],
  "name": "Dataset about WOII"    
}
```
</div>

Issue(17): can artefacts be rejected?

An [=object=] MUST contain an identifier, which must be an [[URI]].





Issue: iets zeggen over object Identification en dereferencability


## Interpreting dates







 






## Possible actors



Issue: continue rationale 

, 
which are performed by a  and 
A notification informs a target party about its occurence.
Activities 



In the network, [[spec-overview#actor|actors]] can perform  that . 
Actors are either [[spec-overview#service-hub|Service Hubs]] or [[spec-overview#maintainer|Maintainers]] (see [[#mappings]]).
By notifying eachother about these activities, actors can communicate and accomplish collaborative actions in a distributed setting. 
An activity that somehow impact an artefact's lifecycle can result in a [[spec-overview#artefact-lifecycle-event|lifecycle event]].


...some intro...

## Actors


## Identification

client chooses id
server mag geen id geven indien niet aanwezig



## ActivityTypes

in a decentralized artefact exchange network

- artefact facts
- requesting services

The table below summarizes the possible notification types that actors can exchange.



Type mapping {#mappings}
===========





Payloads MUST also include the properties `as:origin`, `as:object`, and `as:target`, as defined in [[activitystreams-core#activities]]
The use of these properties is consistent across all notifications:

- `as:actor` refers to the [[spec-overview#actor|actor]] that is responsible for the `activity`; most likely the performer of the activity and sender of the notification
- `as:object` refers to the [[spec-overview#artefact|artefact]] on which the `activity` is performed. 
- `as:target` refers to the destination of the activity; the other [[spec-overview#actor|actor]] that is being notified of this activity.

The terms in [[spec-overview#definitions]] should be mapped in a specific way, using specific types from [[activitystreams-vocabulary#actor-types]] and [[schema-org]].
This is outlined in more detail below.

## Actors

The actor of an activity MUST describe the [[activitystreams-vocabulary#actors | actors]] that are responsible for the activity and serve as contact points for the recepient.
In most cases, this will be the actor sending the notification using either the [[spec-overview#dashboard|Dashboard]] or the [[spec-overview#orchstrator|Orchestrator]] as intermediate.
A notification payload MUST refer to the actor using the `as:actor` property and it MUST use the following type mapping:

<table>
<thead>
  <tr>
  <th>Actor type
  <th>AS Type
<tbody>
  <tr>
  <td>[[spec-overview#Service-Hub|Service Hub]]
  <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>
  <td>[[spec-overview#Maintainer|Maintainer]]
  <td>[[activitystreams-vocabulary#Organization|as:Organization]] or [[activitystreams-vocabulary#Person|as:Person]]
</table>

The actor MUST be identifyable with an HTTP URI, which SHOULD be a [[webid|WebID]].
It MAY have an `ldp:inbox` that refers to the inbox URI where the actor can receive replies.
The actor MAY have a name using `as:name`.

Issue: Explain what the implications are between Service, Person, and Organization

<div class=example>
Example of an organization as actor:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "id": "https://www.kb.nl#me",
  "type": ["Organization", "schema:Organization"],
  "inbox": "https://www.kb.nl#inbox",
  "name": "Koninklijke Bibliotheek"    
}
```
</div>


Payloads {#payloads}
===========

The following payload patterns can be used between actors.

Issue(1): Do we specify the semantics of AS payloads or do provide an additionaly vocabulary that encorporates these semantics?

## Disseminating lifecycle aspects

### Create

A new artefact was created by the actor.

Type: [[activitystreams-vocabulary#Create|as:Create]]

<table>
  <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Mandatory
  <tbody>
    <tr>
      <td>actor  
      <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]]
      <td>âœ…
    <tr>
      <td>object
      <td>[[activitystreams-vocabulary#Object|as:Object]]
      <td>âœ…
    <tr>
      <td>target
      <td>[[activitystreams-vocabulary#Service|as:Service]]
      <td>âœ…
    <tr>  
      <td>instrument
      <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
      <td>
</table>

<div class=example>
Example of a dataset that is being created by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek created Alba dataset",
  "@type": "Create",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "https://www.kb.nl/datasets/1",
    "type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "instrument": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "published": "2014-09-30T12:34:56Z"
}
```
</div>

### Update

An existing artefact was updated by the actor.

Type: [[activitystreams-vocabulary#Update|as:Update]]

<table>
  <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Mandatory
  <tbody>
    <tr>
      <td>actor  
      <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]]
      <td>âœ…
    <tr>
      <td>object
      <td>[[activitystreams-vocabulary#Object|as:Object]]
      <td>âœ…
    <tr>
      <td>target
      <td>[[activitystreams-vocabulary#Service|as:Service]]
      <td>âœ…
    <tr>  
      <td>instrument
      <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
      <td>
</table>

<div class=example>
Example of a dataset that is being updated by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek updates the Alba dataset",
  "type": "Update",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "https://www.kb.nl/datasets/1",
    "type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "published": "2021-02-15T12:34:56Z",
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Delete

A maintainer deletes an artefact. 

Type: [[activitystreams-vocabulary#Delete|as:Delete]]

<table>
  <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Mandatory
  <tbody>
    <tr>
      <td>actor  
      <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]]
      <td>âœ…
    <tr>
      <td>object
      <td>[[activitystreams-vocabulary#Object|as:Object]]
      <td>âœ…
    <tr>
      <td>target
      <td>[[activitystreams-vocabulary#Service|as:Service]]
      <td>âœ…
    <tr>  
      <td>instrument
      <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
      <td>
</table>

<div class=example>
Example of a dataset that was by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek deleted Alba dataset",
  "type": "Delete",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": "https://www.kb.nl/datasets/1",
  "origin": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "target": {
    "id": "http://meemoo.be#me",
    "type": ["Organization", "schema:Organization"],
    "name": "meemoo"  
  },
  "updated": "2021-01-28T19:56:20.114Z",
  "published": "2021-02-15T12:34:56Z"
}
```
</div>

## Requesting services

### Announce

An actor draws attention from another actor to an artefact. 
Either a maintainer announces the existence of an artefact to a Service Hub or a Service Hub informs a Maintainer about processing an artefact.

Type: [[activitystreams-vocabulary#Announce|as:Announce]]

<table>
  <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Mandatory
  <tbody>
    <tr>
      <td>actor  
      <td>[[activitystreams-vocabulary#Organization|as:Organization]]<br />
      or [[activitystreams-vocabulary#Person|as:Person]]<br /> or [[activitystreams-vocabulary#Service|as:Service]]
      <td>âœ…
    <tr>
      <td>object
      <td>[[activitystreams-vocabulary#Object|as:Object]]
      <td>âœ…
    <tr>
      <td>target
      <td>[[activitystreams-vocabulary#Organization|as:Organization]]<br />
      or [[activitystreams-vocabulary#Person|as:Person]]<br /> or [[activitystreams-vocabulary#Service|as:Service]]
      <td>âœ…
    <tr>  
      <td>instrument
      <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
      <td>
</table>

<div class=example>
Example of a dataset that is being created by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek announces Alba dataset",
  "type": "Announce",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "https://www.kb.nl/datasets/1",
    "type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "id": "http://example.org/Adlib",
    "type": "schema:SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Offer

A maintainer offers an artefact to a Service Hub in order to perform a service.
The property `instrument` MAY be used to indicate whether a Dashboard or an Orchestrator was involved in performing the activity and sending then notification. 

Type: [[activitystreams-vocabulary#Offer|as:Offer]]

<table>
  <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Mandatory
  <tbody>
    <tr>
      <td>actor  
      <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]]
      <td>âœ…
    <tr>
      <td>object
      <td>[[activitystreams-vocabulary#Object|as:Object]]
      <td>âœ…
    <tr>
      <td>target
      <td>[[activitystreams-vocabulary#Service|as:Service]]
      <td>âœ…
    <tr>  
      <td>instrument
      <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
      <td>
</table>

<div class=example>
Example of a dataset that was by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "id": "http://example.org/offer/123",
  "summary": "Koninklijke Bibliotheek offers Alba dataset to archive",
  "@type": "Offer",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "https://www.kb.nl/datasets/1",
    "type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "origin": {
    "id": "http://example.org/Orchestrator",
    "type": "schema:SoftwareApplication"
  },
  "target": {
    "id": "http://meemoo.be#me",
    "type": ["Organization", "schema:Organization"],
    "name": "meemoo"  
  },
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Accept

A Service Hub accepts the artefact offered by an actor. 

Type: [[activitystreams-vocabulary#Accept|as:Accept]]

<table>
  <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Mandatory
  <tbody>
    <tr>
      <td>actor  
      <td>[[activitystreams-vocabulary#Service|as:Service]]
      <td>âœ…
    <tr>
      <td>object
      <td>[[activitystreams-vocabulary#Object|as:Object]]
      <td>âœ…
    <tr>
      <td>target
      <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]]
      <td>âœ…
    <tr>  
      <td>instrument
      <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
      <td>
</table>

<div class=example>
Example of a dataset that was accepted by an archival service:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    {
      "schema": "http://schema.org/"
    }
  ],
  "summary": "Meemoo accepted Alba dataset from Koninklijke Bibliotheek",
  "@type": "Accept",
  "actor": {
    "id": "http://meemoo.be#me",
    "type": ["Organization", "schema:Organization"],
    "name": "meemoo"  
  },
  "target": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "@id": "https://www.kb.nl/datasets/1",
    "@type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "instrument": {
    "@id": "http://meemoo.be#orchestrator",
    "@type": "schema:SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Reject

A Service Hub rejects the artefact offered by an actor. 

Type: [[activitystreams-vocabulary#Reject|as:Reject]]
<table>
  <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Mandatory
  <tbody>
    <tr>
      <td>actor  
      <td>[[activitystreams-vocabulary#Service|as:Service]]
      <td>âœ…
    <tr>
      <td>object
      <td>[[activitystreams-vocabulary#Object|as:Object]]
      <td>âœ…
    <tr>
      <td>target
      <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]]
      <td>âœ…
    <tr>  
      <td>instrument
      <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
      <td>
</table>

<div class=example>
Example of a dataset that was rejected by an archival service:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    {
      "schema": "http://schema.org/"
    }
  ],
  "summary": "Meemoo rejects Alba dataset from Koninklijke Bibliotheek",
  "@type": "Reject",
  "actor": {
    "id": "http://meemoo.be#me",
    "type": ["Organization", "schema:Organization"],
    "name": "meemoo"  
  },
  "target": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "@id": "https://www.kb.nl/datasets/1",
    "@type": ["Object", "schema:Dataset"],
    "name": "Dataset about WOII"    
  },
  "instrument": {
    "@id": "http://meemoo.be#orchestrator",
    "@type": "schema:SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}
```
</div>

### Undo

A maintainer retracts a prior offer.

Type: [[activitystreams-vocabulary#Undo|as:Undo]]

<table>
<thead>
  <tr>
    <th>Property
    <th>Type
<tbody>
  <tr>
    <td>actor  
    <td>[[activitystreams-vocabulary#Organization|as:Organization]] | [[activitystreams-vocabulary#Person|as:Person]] 
  <tr>
    <td>object
    <td>[[activitystreams-vocabulary#Activity|as:Activity]]
  <tr>
    <td>target
    <td>[[activitystreams-vocabulary#Service|as:Service]]
  <tr>  
    <td>origin
    <td>[[schema-org#SoftwareApplication|schema:SoftwareApplication]]
</table> 

<div class=example>
Example of a dataset that was by an cultural heritage institution:

``` json
{
  "@context": [
    "https://www.w3.org/ns/activitystreams/", 
    { "schema": "http://schema.org/" }
  ],
  "summary": "Koninklijke Bibliotheek retracts offer to archive the Alba dataset",
  "type": "Undo",
  "actor": {
    "id": "https://www.kb.nl#me",
    "type": ["Organization", "schema:Organization"],
    "inbox": "https://www.kb.nl#inbox",
    "name": "Koninklijke Bibliotheek"    
  },
  "object": {
    "id": "http://example.org/offer/123",
    "type": ["Offer"]
  },
  "origin": {
    "id": "https://www.kb.nl#orchestrator,
    "type": "ex:Orchestrator"
  },
  "target": {
    "id": "http://meemoo.be#me",
    "type": ["Organization", "schema:Organization"],
    "name": "meemoo"  
  },
  "published": "2021-02-15T12:34:56Z"
}
```
</div>

Responding to notifications
==========================

A response is a new notification that can be direct - the notification is about the former notification, or indirect - the notification is about  


<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin"
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editorâ€™s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "webid": {
		"authors": [
			"Andrei Sambra",
			"Henry Story",
			"Tim Berners-Lee"
		],
		"href": "https://dvcs.w3.org/hg/WebID/raw-file/tip/spec/identity-respec.html",
		"title": "WebID 1.0",
		"status": "Editorâ€™s Draft",
		"publisher": "WebID Community Group",
		"deliveredBy": [
			"https://www.w3.org/community/webid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editorâ€™s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "spec-overview": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-overview/",
		"title": "Overview of the ResearcherPod specifications",
		"status": "Editorâ€™s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "spec-rulelanguage": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-rulelanguage/",
		"title": "Rule language for decentralized business processes",
		"status": "Editorâ€™s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "spec-notifications": {
		"authors": [
      "Miel Vander Sande",
      "Patrick Hochstenbach",
      "Ruben Dedecker",
      "Jeroen Werbrouck",
      "Herbert Van de Sompel"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-notifications/",
		"title": "List of notifications",
		"status": "Editorâ€™s Draft",
		"publisher": "ResearcherPod and ErfgoedPod project"
	},
  "cron": {
		"authors": ["The Open Group"
    ],
		"href": "https://pubs.opengroup.org/onlinepubs/9699919799/",
		"title": "crontab - schedule periodic background work",
		"status": "Standard",
		"publisher": "IEEE"
	}
}
</pre>